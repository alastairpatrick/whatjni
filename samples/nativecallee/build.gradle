import whatjni.GenJNIBindingsTask

plugins {
    id 'cpp-application'
}

version 'unspecified'

repositories {
    mavenCentral()
}

configurations {
    jniBinding {
        canBeConsumed = false
        canBeResolved = true

        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, "java-api"))
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, "classes"))
        }
    }
}

dependencies {
    implementation project(":base")
    jniBinding project(":samples:javacaller")
}

application {
    targetMachines = [
            machines.linux.x86_64,
            machines.windows.x86, machines.windows.x86_64,
            machines.macOS.x86_64
    ]
}

task genBindings(type: GenJNIBindingsTask) {
    dependsOn configurations.jniBinding
    classpath.from configurations.jniBinding.files
    nativePackages.addAll(["whatjni.samples"])
}

tasks.withType(CppCompile).configureEach {
    dependsOn "genBindings"
    includes.from("$buildDir/generated/sources/jniBindings")
}

tasks.withType(InstallExecutable).all { installTask ->
    def task = tasks.register("whatjni\$${installTask.name}") {
        doLast {
            def scriptPath = installTask.installDirectory.file("whatjni.bat").get().asFile
            scriptPath.parentFile.mkdirs()
            scriptPath.withWriter {
                it.writeLine("@echo off")
                it.writeLine("set CLASSPATH=${configurations.jniBinding.asPath}")
                it.writeLine("set JVM_LIBRARY_PATH=${whatjni.util.FindVMLibrary.find()}")
                it.writeLine("call \"%~dp0lib\\nativecallee.exe\" %*")
                it.writeLine("exit /B %ERRORLEVEL%")
            }
        }
    }

    installTask.dependsOn(task)
}
